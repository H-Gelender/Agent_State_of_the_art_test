#!/usr/bin/env python
"""
mcp_utils.py

Biblioth√®que de fonctions utilitaires r√©utilisables pour les clients MCP.
Ces fonctions peuvent √™tre utilis√©es dans n'importe quel projet MCP.

Fonctionnalit√©s:
  - Lecture de configuration JSON
  - Connexion aux serveurs MCP
  - Chargement des outils MCP
  - Gestion des sessions MCP
"""

import os
import sys
import json
from pathlib import Path

from typing import Dict, Any, List, Tuple
from contextlib import AsyncExitStack

from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from langchain_mcp_adapters.tools import load_mcp_tools

def read_config_json() -> dict:
    """
    Lit le fichier de configuration JSON des serveurs MCP.

    Cherche 'mcp_config.json' dans le m√™me r√©pertoire que mcp_utils.py

    Returns:
        dict: Configuration JSON pars√©e avec les d√©finitions des serveurs MCP
        
    Raises:
        SystemExit: Si le fichier ne peut pas √™tre lu
    """
    # Chercher dans le m√™me r√©pertoire que mcp_utils.py
    utils_dir = Path(__file__).parent.resolve()
    config_path = utils_dir / "mcp_config.json"
    
    if not config_path.is_file():
        print(f"‚ùå Config file not found at: {config_path}")
        sys.exit(1)
    
    try:
        with open(config_path, "r") as f:
            print(f"‚úÖ Loaded config: {config_path}")
            return json.load(f)
    except Exception as e:
        print(f"‚ùå Failed to read config file: {e}")
        sys.exit(1)


def get_mcp_servers_config(config: Dict[str, Any]) -> Dict[str, Any]:
    """
    Extrait la configuration des serveurs MCP du fichier de configuration.
    
    Args:
        config: Configuration compl√®te charg√©e depuis le JSON
        
    Returns:
        dict: Dictionnaire des serveurs MCP configur√©s
    """
    mcp_servers = config.get("mcpServers", {})
    if not mcp_servers:
        print("‚ö†Ô∏è  No MCP servers found in the configuration.")
    return mcp_servers


async def connect_to_mcp_server(
    server_name: str,
    server_info: Dict[str, Any],
    exit_stack: AsyncExitStack
) -> Tuple[ClientSession, List[Any]]:
    """
    Se connecte √† un serveur MCP et charge ses outils.
    
    Args:
        server_name: Nom du serveur MCP
        server_info: Informations de configuration du serveur (command, args)
        exit_stack: AsyncExitStack pour g√©rer la dur√©e de vie de la connexion
        
    Returns:
        Tuple[ClientSession, List]: Session MCP et liste des outils charg√©s
        
    Raises:
        Exception: Si la connexion au serveur √©choue
    """
    print(f"\nüîó Connecting to MCP Server: {server_name}...")
    
    server_params = StdioServerParameters(
        command=server_info["command"],
        args=server_info["args"]
    )
    
    # √âtablir la connexion au serveur
    read, write = await exit_stack.enter_async_context(
        stdio_client(server_params)
    )
    session = await exit_stack.enter_async_context(
        ClientSession(read, write)
    )
    await session.initialize()
    
    # Charger les outils depuis le serveur
    tools = await load_mcp_tools(session)
    
    print(f"‚úÖ {len(tools)} tools loaded from {server_name}.")
    
    return session, tools


async def connect_to_all_mcp_servers(
    mcp_servers: Dict[str, Any],
    exit_stack: AsyncExitStack,
    verbose: bool = True
) -> List[Any]:
    """
    Se connecte √† tous les serveurs MCP d√©finis et charge tous leurs outils.
    
    Args:
        mcp_servers: Dictionnaire des configurations des serveurs MCP
        exit_stack: AsyncExitStack pour g√©rer toutes les connexions
        verbose: Si True, affiche les d√©tails de chaque outil charg√©
        
    Returns:
        List: Liste de tous les outils charg√©s depuis tous les serveurs
    """
    all_tools = []
    
    for server_name, server_info in mcp_servers.items():
        try:
            session, tools = await connect_to_mcp_server(
                server_name,
                server_info,
                exit_stack
            )
            
            if verbose:
                for tool in tools:
                    print(f"üîß Loaded tool: {tool.name}")
            
            all_tools.extend(tools)
            
        except Exception as e:
            print(f"‚ùå Failed to connect to server {server_name}: {e}")
            continue
    
    return all_tools


class CustomEncoder(json.JSONEncoder):
    """
    Encodeur JSON personnalis√© pour g√©rer les objets non-s√©rialisables de LangChain.
    Si l'objet a un attribut 'content', il est s√©rialis√© en cons√©quence.
    """
    def default(self, o):
        if hasattr(o, "content"):
            return {"type": o.__class__.__name__, "content": o.content}
        return super().default(o)


def format_agent_response(response: Any) -> str:
    """
    Formate la r√©ponse d'un agent en JSON lisible.
    
    Args:
        response: R√©ponse brute de l'agent
        
    Returns:
        str: R√©ponse format√©e en JSON
    """
    try:
        return json.dumps(response, indent=2, cls=CustomEncoder)
    except Exception:
        return str(response)


def load_environment_variable(var_name: str, required: bool = True) -> str:
    """
    Charge une variable d'environnement.
    
    Args:
        var_name: Nom de la variable d'environnement
        required: Si True, quitte le programme si la variable n'existe pas
        
    Returns:
        str: Valeur de la variable d'environnement
        
    Raises:
        SystemExit: Si la variable est requise et n'existe pas
    """
    value = os.getenv(var_name, "")
    if required and not value:
        print(f"‚ùå {var_name} not found in environment variables.")
        sys.exit(1)
    return value