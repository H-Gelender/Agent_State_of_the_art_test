#!/usr/bin/env python
"""
query_agent.py (Version de D√©bogage de la R√©ponse)

Interroge un agent A2A et affiche la structure compl√®te de la r√©ponse.
"""
import asyncio
import logging
from uuid import uuid4
import json

import httpx
from a2a.client import A2ACardResolver, A2AClient
from a2a.types import MessageSendParams, SendMessageRequest, Role, TextPart, Part, Message

# --- Configuration ---
AGENT_BASE_URL = 'http://localhost:8000'
QUESTION_TO_AGENT = "Find recent papers about attention mechanisms in Large Language Models from arXiv"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def main():
    """Fonction principale du client."""
    
    logger.info(f"üöÄ Lancement du client pour interroger l'agent √† {AGENT_BASE_URL}")

    # Increase timeout to 120 seconds for AI processing
    async with httpx.AsyncClient(timeout=120.0) as httpx_client:
        
        resolver = A2ACardResolver(
            httpx_client=httpx_client,
            base_url=AGENT_BASE_URL,
        )
        agent_card = await resolver.get_agent_card(relative_card_path='/.well-known/agent-card.json')
        logger.info("‚úÖ Carte d'agent r√©cup√©r√©e avec succ√®s !")

        client = A2AClient(
            httpx_client=httpx_client, 
            agent_card=agent_card
        )
        logger.info("‚úÖ Client A2A initialis√©.")

        logger.info(f"‚ùì Envoi de la question : '{QUESTION_TO_AGENT}'")
        send_message_payload = {
            'message': {
                'role': 'user', 'parts': [{'kind': 'text', 'text': QUESTION_TO_AGENT}], 'messageId': uuid4().hex
            }
        }
        request = SendMessageRequest(id=str(uuid4()), params=MessageSendParams(**send_message_payload))
        response = await client.send_message(request)

        logger.info("üéâ R√©ponse re√ßue de l'agent !")
        
        # --- D√âBOGAGE : AFFICHER LA STRUCTURE DE LA R√âPONSE ---
        print("\n=================== D√âBUT DE LA R√âPONSE BRUTE ===================\n")
        try:
            # La meilleure fa√ßon de voir le contenu d'un objet Pydantic est model_dump_json
            response_dict_str = response.model_dump_json(indent=2, exclude_none=True)
            print("Type de l'objet response:", type(response))
            print("Contenu de la r√©ponse (JSON) :")
            print(response_dict_str)
        except AttributeError:
            # Si ce n'est pas un objet Pydantic, on l'affiche directement
            print("La r√©ponse n'est pas un objet Pydantic standard. Affichage direct :")
            print(response)
        print("\n==================== FIN DE LA R√âPONSE BRUTE ====================\n")
        
        # --- Affichage de la r√©ponse interpr√©t√©e (le code qui fonctionne d√©j√†) ---
        if isinstance(response, Message) and response.parts:
            for part in response.parts:
                text_to_display = ""
                if isinstance(part, TextPart):
                    text_to_display = part.text
                elif isinstance(part, Part) and isinstance(part.root, TextPart):
                    text_to_display = part.root.text
                
                if text_to_display:
                    print("\n--- R√©ponse finale de l'agent (interpr√©t√©e) ---\n")
                    print(text_to_display)
                    print("\n-----------------------------------------------\n")

if __name__ == '__main__':
    asyncio.run(main())